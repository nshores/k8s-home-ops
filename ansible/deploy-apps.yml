---
# Init the Docker Swarm only on the first manager
- hosts: swarm_nodes
  gather_facts: yes
  become: yes
  vars:
    orchestrator: docker-swarm # this'll tell all roles that we're doing a docker-swarm deploy

  tasks:
    - name: combine default values with user values (used to conditionally run tasks)
      set_fact:
        combined_config: "{{ recipe_default_config | combine(recipe_config, recursive=True) }}"
      tags: always

    - name: install nfs
      apt:
        name: "{{ packages }}"
      vars:
        packages:
          - nfs-common

    - name: add mount movies nfs share
      mount:
        src: slimcloud.lab.nickshores.net:/mnt/user/TV
        path: /mnt/tv
        state: mounted
        fstype: nfs

    - name: mount tv nfs share
      mount:
        src: slimcloud.lab.nickshores.net:/mnt/user/Movies
        path: /mnt/movies
        state: mounted
        fstype: nfs

    - name: set tz
      timezone:
        name: America/Los_Angeles

        #TODO install and start avahi-daemon
        #sudo apt install -y avahi-daemon &&  sudo sed -i 's/#enable-reflector=no/enable-reflector=yes/g' avahi-daemon.conf

    # Setup keepalived
    - {
        import_role: { name: keepalived },
        tags: [keepalived, infrastructure],
        when: combined_config.keepalived.enabled | bool,
      }

    # Setup ceph
    - {
        import_role: { name: ceph },
        tags: [ceph, infrastructure],
        when: combined_config.ceph.enabled | bool,
      }

    - name: Run remainder of tasks on one node only
      delegate_to: "{{ play_hosts[0] }}"
      run_once: true
      block:
        # Setup traefik (the overlay network)
        - { import_role: { name: traefik }, tags: [traefik, infrastructure] }

        # Setup traefik
        - {
            import_role: { name: traefikv1 },
            tags: [traefikv1, infrastructure],
            when: combined_config.traefikv1.enabled | bool,
          }

        # Setup nzbhydra
        - {
            import_role: { name: nzbhydra },
            tags: [nzbhydra],
            when: combined_config.nzbhydra.enabled | bool,
          }

        # Setup ombi
        - {
            import_role: { name: ombi },
            tags: [ombi],
            when: combined_config.ombi.enabled | bool,
          }

        # Setup portainer
        - {
            import_role: { name: portainer },
            tags: [portainer],
            when: combined_config.portainer.enabled | bool,
          }

        # Setup radarr
        - {
            import_role: { name: radarr },
            tags: [radarr],
            when: combined_config.radarr.enabled | bool,
          }

        # Setup sabnzbd
        - {
            import_role: { name: sabnzbd },
            tags: [sabnzbd],
            when: combined_config.sabnzbd.enabled | bool,
          }

        # Setup sonarr
        - {
            import_role: { name: sonarr },
            tags: [sonarr, autopirate],
            when: combined_config.sonarr.enabled | bool,
          }

        # Setup plex
        - { import_role: { name: plex }, tags: [plex] }

        # Setup ha
        - { import_role: { name: homeassistant }, tags: [homeassistant] }

        # Setup shepherd-apprise
        - { import_role: { name: shepherd }, tags: [shepherd] }

        # Setup zm
        - { import_role: { name: zoneminder }, tags: [zoneminder] }

        # Setup monitoring stack
        - { import_role: { name: shoreslab-mon }, tags: [shoreslab-mon] }

        # Setup swampit stack
        - { import_role: { name: swarmpit }, tags: [swarmpit] }

        # Setup pihiole stack
        - { import_role: { name: pihole }, tags: [pihole] }

        # Setup frigate stack
        - { import_role: { name: frigate }, tags: [frigate] }

        # Setup frigate stack
        - { import_role: { name: hivemq }, tags: [hivemq] }
